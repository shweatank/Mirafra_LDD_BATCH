#include <stdio.h>
#include <stdlib.h>
#include <alsa/asoundlib.h>

#define PCM_DEVICE "default"  // ALSA playback device
#define AUDIO_FILE "audio.raw" // Path to PCM raw audio file

int main(int argc, char *argv[])
{
    snd_pcm_t *pcm_handle;           // PCM device handle
    snd_pcm_hw_params_t *params;     // PCM hardware parameters
    unsigned int rate = 44100;       // Sampling rate (Hz)
    int channels = 2;                // Number of audio channels (stereo)
    snd_pcm_uframes_t frames = 32;   // Number of frames per period
    char *buffer;                    // Buffer to hold audio data
    int size, pcm, fd;

    // Open PCM device for playback
    if (snd_pcm_open(&pcm_handle, PCM_DEVICE, SND_PCM_STREAM_PLAYBACK, 0) < 0) {
        fprintf(stderr, "Error opening PCM device %s\n", PCM_DEVICE);
        return -1;
    }

    // Allocate and initialize hardware parameters
    snd_pcm_hw_params_alloca(&params);
    snd_pcm_hw_params_any(pcm_handle, params);

    // Set hardware parameters
    snd_pcm_hw_params_set_access(pcm_handle, params, SND_PCM_ACCESS_RW_INTERLEAVED);
    snd_pcm_hw_params_set_format(pcm_handle, params, SND_PCM_FORMAT_S16_LE); // 16-bit little endian
    snd_pcm_hw_params_set_channels(pcm_handle, params, channels);
    snd_pcm_hw_params_set_rate_near(pcm_handle, params, &rate, 0);
    snd_pcm_hw_params_set_period_size_near(pcm_handle, params, &frames, 0);

    // Write parameters to the driver
    if (snd_pcm_hw_params(pcm_handle, params) < 0) {
        fprintf(stderr, "Error setting HW parameters.\n");
        return -1;
    }

    // Get buffer size
    snd_pcm_hw_params_get_period_size(params, &frames, 0);
    size = frames * channels * 2; // 2 bytes per sample (16-bit audio)
    buffer = (char *)malloc(size);

    // Open the audio file (raw PCM format)
    fd = open(AUDIO_FILE, O_RDONLY);
    if (fd < 0) {
        perror("Error opening audio file");
        return -1;
    }

    // Playback audio
    printf("Playing audio...\n");
    while (read(fd, buffer, size) > 0) {
        pcm = snd_pcm_writei(pcm_handle, buffer, frames);
        if (pcm == -EPIPE) {
            fprintf(stderr, "XRUN occurred\n");
            snd_pcm_prepare(pcm_handle);
        } else if (pcm < 0) {
            fprintf(stderr, "Error writing to PCM device: %s\n", snd_strerror(pcm));
        }
    }

    // Clean up
    close(fd);
    free(buffer);
    snd_pcm_drain(pcm_handle);
    snd_pcm_close(pcm_handle);
    printf("Playback finished.\n");

    return 0;
}