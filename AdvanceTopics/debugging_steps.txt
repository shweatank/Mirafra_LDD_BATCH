# Debugging Raspberry Pi 4B Using KDB and KGDB

## Part 1: Setting Up the Raspberry Pi for Debugging

### 1. Prerequisites
# Ensure you have the necessary hardware and software before proceeding.
- A Raspberry Pi 4B with Raspberry Pi OS or another supported Linux distribution.
- A PC with a serial console program (e.g., minicom, screen, or PuTTY).
- A USB-to-UART cable or UART pins connected between the Raspberry Pi and PC.
- Linux kernel source for Raspberry Pi matching your OS version.
- GDB installed on the PC for debugging.

### 2. Enable UART on Raspberry Pi
# Enabling UART allows serial communication needed for debugging.
1. Open the Raspberry Pi boot configuration file:
   ```bash
   sudo nano /boot/config.txt
   ```
2. Add the following line to enable UART:
   ```txt
   enable_uart=1
   ```
3. Save the file and reboot the Raspberry Pi:
   ```bash
   sudo reboot
   ```

### 3. Build the Kernel with Debugging Enabled
# Compile a custom kernel with KDB and KGDB debugging features enabled.
1. Install necessary development tools:
   ```bash
   sudo apt update
   sudo apt install git bc bison flex libssl-dev make gcc
   ```
2. Clone the Raspberry Pi kernel source:
   ```bash
   git clone --depth=1 https://github.com/raspberrypi/linux
   cd linux
   ```
3. Configure the kernel with debugging options:
   ```bash
   make bcm2711_defconfig
   make menuconfig
   ```
   - In the menu, navigate to:
     ```
     Kernel hacking  --->
       [*] Kernel debugging
       [*] KGDB: kernel debugger
       [*] KDB: built-in kernel debugger
     ```
   - Enable these options, save, and exit.
4. Build the kernel:
   ```bash
   make -j$(nproc) zImage modules dtbs
   ```
5. Install the new kernel:
   ```bash
   sudo make modules_install
   sudo cp arch/arm/boot/zImage /boot/kernel7l.img
   sudo cp arch/arm/boot/dts/*.dtb /boot/
   sudo cp arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
   ```
6. Reboot the Raspberry Pi to boot into the new kernel:
   ```bash
   sudo reboot
   ```

## Part 2: Using KDB (Kernel Debugger)

### 1. Trigger KDB
# KDB is triggered manually or via a kernel parameter.
1. Access the Raspberry Pi using a UART connection from your PC:
   ```bash
   sudo screen /dev/ttyUSB0 115200
   ```
2. To enable SysRq for triggering KDB, edit the command line options:
   ```bash
   sudo nano /boot/cmdline.txt
   ```
   Add the following parameter:
   ```txt
   sysrq_always_enabled=1
   ```
   Save the file and reboot.
3. Trigger KDB using the key combination:
   - Press `Alt + SysRq + G` on a keyboard connected to the Raspberry Pi.

### 2. Useful Commands in KDB
# Interact with the kernel debugger using these commands:
- Display the process list:
  ```bash
  ps
  ```
- Show the kernel stack trace:
  ```bash
  bt
  ```
- Examine memory:
  ```bash
  md <address>
  ```
- Continue execution of the kernel:
  ```bash
  go
  ```

## Part 3: Using KGDB (Kernel GNU Debugger)

### 1. Configure KGDB
# KGDB allows debugging via GDB over UART.
1. Edit the kernel command line to include KGDB options:
   ```bash
   sudo nano /boot/cmdline.txt
   ```
   Add the following:
   ```txt
   kgdboc=ttyS0,115200 kgdbwait
   ```
   - `ttyS0`: UART device.
   - `115200`: Baud rate for communication.
2. Reboot the Raspberry Pi:
   ```bash
   sudo reboot
   ```

### 2. Setup GDB on the Host PC
# Install and configure GDB to debug the Raspberry Pi kernel.
1. Install GDB:
   ```bash
   sudo apt install gdb-multiarch
   ```
2. Connect to the Raspberry Pi via UART:
   ```bash
   sudo screen /dev/ttyUSB0 115200
   ```

### 3. Debug the Kernel
# Use GDB to debug the Raspberry Pi kernel remotely.
1. Launch GDB on the host PC:
   ```bash
   gdb vmlinux
   ```
   - Replace `vmlinux` with the uncompressed kernel image.
2. Set up a remote target:
   ```bash
   target remote /dev/ttyUSB0
   ```
3. Debug the kernel using GDB commands:
   - Set breakpoints:
     ```bash
     break function_name
     ```
   - Continue execution:
     ```bash
     continue
     ```
   - Inspect variables:
     ```bash
     print variable_name
     ```

### 4. Detach and Exit
# Properly detach and exit from KGDB and GDB sessions.
- Detach GDB:
  ```bash
  detach
  ```
- Exit KGDB:
  ```bash
  q
  ```

## Best Practices and Tips
# Recommendations for effective debugging.
1. Include kernel symbols (`CONFIG_DEBUG_INFO`) during kernel compilation for better debugging.
2. Use a stable UART connection with matching baud rates on both ends.
3. For advanced debugging, dynamically load kernel modules and test them incrementally.

---
By following these steps, you can efficiently debug the kernel on a Raspberry Pi 4B using KDB and KGDB.
