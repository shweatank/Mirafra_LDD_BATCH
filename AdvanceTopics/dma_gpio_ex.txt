#include <linux/module.h>
#include <linux/init.h>
#include <linux/kernel.h>
#include <linux/gpio.h>
#include <linux/dma-mapping.h>
#include <linux/platform_device.h>
#include <linux/delay.h>
#include <linux/slab.h>

#define GPIO_PIN 18 // GPIO pin for example
#define DMA_BUF_SIZE 1024

struct dma_gpio_dev {
    void *dma_buf;
    dma_addr_t dma_handle;
    struct device *dev;
};

static struct dma_gpio_dev *dma_gpio;

static int setup_dma_buffer(void)
{
    dma_gpio->dma_buf = dma_alloc_coherent(dma_gpio->dev, DMA_BUF_SIZE, &dma_gpio->dma_handle, GFP_KERNEL);
    if (!dma_gpio->dma_buf) {
        dev_err(dma_gpio->dev, "Failed to allocate DMA buffer\n");
        return -ENOMEM;
    }

    dev_info(dma_gpio->dev, "DMA buffer allocated: virt=%p, phys=%pa\n", dma_gpio->dma_buf, &dma_gpio->dma_handle);
    return 0;
}

static void free_dma_buffer(void)
{
    if (dma_gpio->dma_buf) {
        dma_free_coherent(dma_gpio->dev, DMA_BUF_SIZE, dma_gpio->dma_buf, dma_gpio->dma_handle);
        dev_info(dma_gpio->dev, "DMA buffer freed\n");
    }
}

static int dma_gpio_probe(struct platform_device *pdev)
{
    int ret;

    dma_gpio = devm_kzalloc(&pdev->dev, sizeof(struct dma_gpio_dev), GFP_KERNEL);
    if (!dma_gpio)
        return -ENOMEM;

    dma_gpio->dev = &pdev->dev;

    // Configure GPIO
    ret = gpio_request(GPIO_PIN, "dma_gpio");
    if (ret) {
        dev_err(&pdev->dev, "Failed to request GPIO %d\n", GPIO_PIN);
        return ret;
    }

    gpio_direction_output(GPIO_PIN, 0);

    // Setup DMA buffer
    ret = setup_dma_buffer();
    if (ret)
        goto err_free_gpio;

    // Fill DMA buffer with alternating patterns
    for (int i = 0; i < DMA_BUF_SIZE; i++) {
        ((u8 *)dma_gpio->dma_buf)[i] = (i % 2) ? 0xFF : 0x00;
    }

    // Simulate GPIO toggling via DMA (pseudo implementation, real DMA setup is more complex)
    for (int i = 0; i < DMA_BUF_SIZE; i++) {
        gpio_set_value(GPIO_PIN, ((u8 *)dma_gpio->dma_buf)[i] & 0x01);
        udelay(10);
    }

    dev_info(&pdev->dev, "DMA GPIO toggling done\n");
    return 0;

err_free_gpio:
    gpio_free(GPIO_PIN);
    return ret;
}

static int dma_gpio_remove(struct platform_device *pdev)
{
    free_dma_buffer();
    gpio_free(GPIO_PIN);
    dev_info(&pdev->dev, "DMA GPIO driver removed\n");
    return 0;
}

static const struct of_device_id dma_gpio_of_match[] = {
    { .compatible = "rpi,dma-gpio", },
    {},
};
MODULE_DEVICE_TABLE(of, dma_gpio_of_match);

static struct platform_driver dma_gpio_driver = {
    .probe = dma_gpio_probe,
    .remove = dma_gpio_remove,
    .driver = {
        .name = "dma_gpio_driver",
        .of_match_table = dma_gpio_of_match,
    },
};

module_platform_driver(dma_gpio_driver);

MODULE_AUTHOR("techdhaba");
MODULE_DESCRIPTION("Basic DMA GPIO Driver for Raspberry Pi");
MODULE_LICENSE("GPL");